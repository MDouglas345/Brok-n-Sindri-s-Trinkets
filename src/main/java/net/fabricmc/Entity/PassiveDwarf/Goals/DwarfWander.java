 // Source code is unavailable, and was generated by the Fernflower decompiler.
 package net.fabricmc.Entity.PassiveDwarf.Goals;

 import java.util.EnumSet;
import java.util.List;

import net.fabricmc.Entity.PassiveDwarf.PassiveDwarf;
import net.fabricmc.Items.ItemGroup.ItemGroupRegistry;
import net.fabricmc.Util.AIHelper.SensorHelper;
import net.minecraft.entity.ItemEntity;
import net.minecraft.entity.ai.NoPenaltyTargeting;
import net.minecraft.entity.ai.goal.Goal;
import net.minecraft.entity.ai.goal.Goal.Control;
 import net.minecraft.entity.mob.PathAwareEntity;
import net.minecraft.item.ItemGroup;
import net.minecraft.server.world.ServerWorld;
import net.minecraft.util.math.Vec3d;
 import org.jetbrains.annotations.Nullable;
 
 public class DwarfWander extends Goal {
    public static final int DEFAULT_CHANCE = 120;
    protected  PassiveDwarf mob;
    protected double targetX;
    protected double targetY;
    protected double targetZ;
    protected  double speed;
    protected int chance;
    protected boolean ignoringChance;
    private  boolean canDespawn;
 
    public DwarfWander(PathAwareEntity mob, double speed) {
       this(mob, speed, 120);
    }
 
    public DwarfWander(PathAwareEntity mob, double speed, int chance) {
       this(mob, speed, chance, true);
    }
 
    public DwarfWander(PathAwareEntity entity, double speed, int chance, boolean canDespawn) {
       this.mob = (PassiveDwarf) entity;
       this.speed = speed;
       this.chance = chance;
       this.canDespawn = canDespawn;
       this.setControls(EnumSet.of(Control.MOVE));
    }
    
    @Override
    public boolean canStart() {
       if (this.mob.hasPassengers()) {
          return false;
       } else {
          if (!this.ignoringChance) {
             if (this.canDespawn && this.mob.getDespawnCounter() >= 100) {
                return false;
             }
 
             if (this.mob.getRandom().nextInt(toGoalTicks(this.chance)) != 0) {
                return false;
             }
          }
          Vec3d vec3d = null;
          if ( mob.lastKnownForgeLocation != null && !mob.getBlockPos().isWithinDistance(mob.lastKnownForgeLocation, 10)){
            vec3d = Vec3d.ofBottomCenter(mob.lastKnownForgeLocation);
          }
          else{
            vec3d = this.getWanderTarget();
          }

           
          if (vec3d == null) {
             return false;
          } else {
             this.targetX = vec3d.x;
             this.targetY = vec3d.y;
             this.targetZ = vec3d.z;
             this.ignoringChance = false;
             return true;
          }
       }
    }
 
    @Nullable
    protected Vec3d getWanderTarget() {
       return NoPenaltyTargeting.find(this.mob, 10, 7);
    }
 
    public boolean shouldContinue() {
        List<ItemEntity> wanted = SensorHelper.getNearestEntityByClass((ServerWorld)mob.world, ItemEntity.class, mob,(entity) ->{
            ItemGroup group = ((ItemEntity) entity).getStack().getItem().getGroup();
            return group.equals(ItemGroup.COMBAT) || group.equals(ItemGroup.TOOLS) || group.equals(ItemGroupRegistry.RUNE_STONE);
        });

        return (mob.isInventoryFull() || wanted.isEmpty()) && !this.mob.getNavigation().isIdle() && !this.mob.hasPassengers();
    }
 
    public void start() {
       this.mob.getNavigation().startMovingTo(this.targetX, this.targetY, this.targetZ, this.speed);
    }
 
    public void stop() {
       this.mob.getNavigation().stop();
       super.stop();
    }
 
    public void ignoreChanceOnce() {
       this.ignoringChance = true;
    }
 
    public void setChance(int chance) {
       this.chance = chance;
    }
 }
 